<!DOCTYPE html>
<meta charset="utf-8"/>
<title>Hand Note</title>

<style>

#container
{
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  font-size: 3vw;
}

#container *:hover
{
  cursor: pointer;
}

</style>

<div id="container"></div>
<textarea></textarea>
<button>Run!</button>

<script>

const maxSound = 5;
const minSound = 0;
const memSize = 250;

const sounds = [

  new Audio("noise/clap.mp3"),
  new Audio("noise/click.mp3"),
  new Audio("noise/crack.mp3"),
  new Audio("noise/punch.mp3"),
  new Audio("noise/scratch.mp3"),
  new Audio("noise/slap.mp3")
];

const registers = {
  
  memoryPointer: 0,
  //duration: 0,
  volume: 0,
  sound: 0,
  a: 0,
  b: 0,
  
  setSound: (n) => this.sound = n > maxSound ? minSound : n < minSound ? maxSound : n,
  
  setVolume: (n) => this.volume = (n > 100 ? 100 : n < 0 ? 0 : n) / 100,
  getVolume: () => this.volume * 100,
  
  setMemoryPointer: (n) => this.memoryPointer = n > memSize ? memSize : n < 0 ? 0 : n
};

let memory = Array(memSize);

const glyphs = [
  
  "👋", // play
  //"🤏", // store to duration
  "✋", // end if/repeat
  "👌", // repeat
  "✌", // store to volume
  "🤘", // store to sound type
  "👈", // move + 1
  "👉", // move - 1
  "👆", // increment
  "👇", // decrement
  "👍", // higher than
  "👎", // lower than
  "✊", // store to register a
  "👊", // store to register b
  "🤛", // from register a
  "🤜"  // from register b
];

window.onload = () => {
  
  const container = document.getElementById("container");
  const textarea = document.querySelector("textarea");
  memory = memory.fill(0, 0, memSize);
  
  glyphs.forEach(g => {
  
    const button = document.createElement("div");
    button.onclick = () => textarea.value += g;
    button.innerText = g;
    
    container.appendChild(button);
  });
  
  document.querySelector("button").onclick = () => parse(textarea.value).stack.forEach(exp => exp());
};

const parse = (src, i = 0) => {

  const stack = [];
  
  const chars = Array.from(src);

  for (; i < chars.length; ++i) {
  
    switch (chars[i]) {
      
      case "👋":
        
        stack.push(() => {
          
          sounds[registers.sound].volume = registers.getVolume();
          sounds[registers.sound].play();
        });
        break;

      case "✋":
        return {stack: stack, index: i};

      case "👌":
        
        const repeatStack = parse(src, i);
        i = repeatStack.index;
        
        stack.push(() => {
        
          const max = memory[registers.memoryPointer];
          
          for (let j = 0; j < max; ++j)
              repeatStack.stack.forEach(exp => exp());
        });
        continue;

      case "✌":
        
        stack.push(() => registers.setVolume(memory[registers.memoryPointer]));
        break;

      case "🤘":
        
        stack.push(() => registers.setSound(memory[registers.memoryPointer]));
        break;

      case "👈":
        
        stack.push(() => registers.setregisters.memoryPointer(registers.memoryPointer - 1));
        break;

      case "👉":
        
        stack.push(() => registers.setregisters.memoryPointer(registers.memoryPointer + 1));
        break;

      case "👆":
        
        stack.push(() => ++memory[registers.memoryPointer]);
        break;

      case "👇":
        
        stack.push(() => --memory[registers.memoryPointer]);
        break;

      case "👍":
        
        const greaterStack = parse(src, i);
        i = greaterStack.index;
        
        stack.push(() => {
                  
          if (registers.a > registers.b)
              greaterStack.stack.forEach(exp => exp());
        });
        continue;

      case "👎":
      
        const lowerStack = parse(src, i);
        i = lowerStack.index;
        
        stack.push(() => {
                  
          if (registers.a < registers.b)
              lowerStack.stack.forEach(exp => exp());
        });
        continue;

      case "✊":
        
        stack.push(() => registers.a = memory[registers.memoryPointer]);
        break;

      case "👊":
        
        stack.push(() => registers.b = memory[registers.memoryPointer]);
        break;

      case "🤛":
        
        stack.push(() => memory[registers.memoryPointer] = registers.a);
        break;

      case "🤜":
        
        stack.push(() => memory[registers.memoryPointer] = registers.b);
        break;
        
      default:
        console.log(chars[i]);
    }
  }
  
  return {stack: stack, index: i};
}
</script>